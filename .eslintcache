[{"/Users/HunterLacefield/javascript-calculator/src/index.js":"1","/Users/HunterLacefield/javascript-calculator/src/App.js":"2","/Users/HunterLacefield/javascript-calculator/src/reportWebVitals.js":"3"},{"size":13998,"mtime":1616982944833,"results":"4","hashOfConfig":"5"},{"size":528,"mtime":1610123790071,"results":"6","hashOfConfig":"7"},{"size":362,"mtime":1610123790085,"results":"8","hashOfConfig":"5"},{"filePath":"9","messages":"10","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"11","usedDeprecatedRules":"12"},"1e2nlvq",{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"pvc3zu",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/HunterLacefield/javascript-calculator/src/index.js",["17","18","19"],"// I added { useState } so hook could be used (sololearn)\nimport React, { useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport reportWebVitals from \"./reportWebVitals\";\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n//Start code here\n/* could also use this regex /\\-|\\+|\\*|\\//. Would do this if I including keyPress \nas \\W would take all special characters, but don't have to as I am only doing buttons \nthat can be clicked and there are only these options so \\W is more elegant */\nconst endsWithOperator = /(\\W)$/,\n  endsWithSubtract = /-$/,\n  endsWithAdd = /\\+$/,\n  endsWithOperatorNotSubtract = /(\\+|\\*|\\/)$/,\n  operatorNotSubtract = /(\\+|\\*|\\/)/,\n  endsWithTwoOperators = /((-|\\+|\\*|\\/){2})$/,\n  operatorRegex = /(-|\\+|\\*|\\/)/, // In parenthesis because don't want to get rid of them when splitting the array later in signChange()\n  clearStyle = { backgroundColor: \"#dd2b2b\" },\n  signDecimalChange = { backgroundColor: \"#525252\" },\n  operatorStyle = { backgroundColor: \"#fc8c30\" };\n\nfunction MyCalculator() {\n  const [output, setOutput] = useState(\"0\"); // Set output as a string because formula is being evaluated with eval()\n  const [formula, setFormula] = useState(\"\");\n\n  function numberOperatorClick(e) {\n    if (output.length < 16 && formula.length <= 25) {\n      // If output is less than 16 digits handle formula\n      handleFormula(e);\n    } else if (formula.length > 25) {\n      alert(\"Formula Limit Met.\");\n    } else {\n      alert(\"Digit Limit Met.\");\n    }\n  }\n\n  function decimalClick(e) {\n    // If output (current number) doesn't have a decimal then handleFormula(e) to add it.\n    if (!output.includes(\".\")) {\n      handleFormula(e);\n    }\n    // Will not perorm anything if output (current number) already has a decimal.\n  }\n\n  function allClearClick() {\n    setOutput(\"0\");\n    setFormula(\"\");\n  }\n\n  function clearOneClick() {\n    setOutput(output.slice(0, -1)); // Gets rid of last character on string\n    setFormula(formula.slice(0, -1)); // Gets rid of last character on string\n    // in slice positive numbers are relative to the beggining and negative numbers are relative to the end\n  }\n\n  function percentageClick() {\n    // Divide output by 100 and change it to a string for future manipulation.\n    setOutput((output / 100).toString());\n    // Set formula to the number that is being changed to a percentage and add the string \"/ 100\" to show what you're doing in formula.\n    setFormula(output + \"/ 100 =\" + (output / 100).toString());\n  }\n\n  function equalsClick() {\n    // If equal sign has been clicked then do not add to formula\n    if (operatorNotSubtract.test(formula[0])) {\n      alert(\"First item in formula can not be an operator\");\n    }\n    // If the last character in formula is +.\n    else if (endsWithAdd.test(formula)) {\n      // Add a zero to end of formula. For example, 9+ turns into 9 + 0 so now eval will work.\n      const evaluation = eval((formula + \"0\").replace(\"--\", \"+\")); // Getting the evaluation number\n      const evaluationNumber = parseFloat(evaluation.toFixed(6)); // toFixed(6) rounds it to 6 decimal places. parseFloat() gets rid of the extra zeros we don't need. For exampe, without parseFloat 9*5 = 45.000000\n      setOutput(evaluationNumber.toString()); // eval() takes a string equation and returns its' value.\n      // eval returns a number so need to convert it back to a string to use includes() in handleFormula()\n\n      setFormula(formula + \"0=\" + evaluationNumber.toString());\n    }\n    // if the last character in formula is an operator not +. We add one\n    else if (endsWithOperator.test(formula)) {\n      // Add a one to end of formula. For example, 9/ turns into 9/1 so now eval will work.\n      const evaluation = eval((formula + \"1\").replace(\"--\", \"+\")); // Getting the evaluation number\n      const evaluationNumber = parseFloat(evaluation.toFixed(6)); // toFixed(6) rounds it to 6 decimal places. parseFloat() gets rid of the extra zeros we don't need. For exampe, without parseFloat 9*5 = 45.000000\n      setOutput(evaluationNumber.toString()); // eval() takes a string equation and returns its' value.\n      // eval returns a number so need to convert it back to a string to use includes() in handleFormula()\n\n      setFormula(formula + \"1=\" + evaluationNumber.toString());\n    }\n\n    // If formula doesn't have the equal sign already\n    else if (!formula.includes(\"=\")) {\n      const evaluation = eval(formula.replace(\"--\", \"+\")); // Getting the evaluation number\n      const evaluationNumber = parseFloat(evaluation.toFixed(6)); // toFixed(6) rounds it to 6 decimal places. parseFloat() gets rid of the extra zeros we don't need. For exampe, without parseFloat 9*5 = 45.000000\n      setOutput(evaluationNumber.toString()); // eval() takes a string equation and returns its' value.\n      // eval returns a number so need to convert it back to a string to use includes() in handleFormula()\n\n      setFormula(formula + \"=\" + evaluationNumber.toString());\n    }\n  }\n\n  function handleFormula(event) {\n    const eventValue = event.target.value;\n    const formulaArray = formula.split(operatorRegex);\n    // console.log(formulaArray); // used to see if number with multiple digits is the last index after operator is clicked\n\n    // If the previous button pushed was 0 (or first button in formula sequence)\n    // Handles when a number begins with 0 and shouldn't\n    if (output === \"0\") {\n      setOutput(eventValue); //Output gets rid of the 0 in front and resets output as the eventValue\n      if (formula === \"\") {\n        //We use this if statement for the first run so when first clicking a button the formula will be set as eventValue\n        setFormula(eventValue);\n      }\n      // if an equation equals 0 and operator is then clicked will make calculator read 0 then operator Clicked. Ex: 4-4=0 => 0(operatorClicked)\n      else if (operatorRegex.test(eventValue)) {\n        setFormula(output + eventValue);\n      }\n      // Formula is the same except we replace the previous event which was '0' with the eventValue. So 09 => 9\n      else {\n        setFormula(formula.replace(\"0\", eventValue));\n      }\n    }\n\n    // If the first button clicked is an operator\n    else if (formula === \"\" && operatorRegex.test(eventValue)) {\n      alert(\"An operator can not go first in formula\");\n    }\n\n    // If formula has an \"=\" and an operator is clicked\n    else if (formula.includes(\"=\") && operatorRegex.test(eventValue)) {\n      // Don't need to set new output as we want to keep the answer of previous answer as the output\n      setFormula(output + eventValue); // Sets formula as previous answer and operator clicked\n    }\n\n    // if formula has an \"=\" and a number is clicked reset output and formula to eventValue. Essentially, resets the calculator except new number is first click this time.\n    else if (formula.includes(\"=\")) {\n      setOutput(eventValue);\n      setFormula(eventValue);\n    }\n\n    // If the last button was a operator not (-) && the eventValue is not subtract\n    else if (\n      endsWithOperatorNotSubtract.test(formula) &&\n      operatorNotSubtract.test(eventValue)\n    ) {\n      setOutput(eventValue);\n      setFormula(\n        operatorNotSubtract.test(eventValue) &&\n          endsWithOperatorNotSubtract.test(formula)\n          ? formula.slice(0, -1) + eventValue // slice (0, -1) cuts off last character and then we replace it with eventValue\n          : [...formulaArray, eventValue].join(\"\")\n      );\n    }\n\n    // If previous button is - and next button is operator we replace the - with the eventValue. This way equations like 9 - * 3 do not exist...\n    else if (\n      endsWithSubtract.test(formula) &&\n      operatorNotSubtract.test(eventValue)\n    ) {\n      setOutput(eventValue);\n      setFormula(formula.slice(0, -2) + eventValue); // Slice(0,-2) cuts off last two characters of formula in this case (an operator and -) then we add the eventValue\n    }\n\n    // If formula has two operators in a row at end and the next event is an operator (handles cases when - is involved as the second operator.)\n    else if (\n      endsWithTwoOperators.test(formula) &&\n      operatorRegex.test(eventValue)\n    ) {\n      //Don't need to put anything here as we just want to keep same output and formula if formula ends with two operators and an operator is the eventValue\n      /* We don't need to change formula as this else if statement is handling when formula ends with two operators (last operator is '-') and eventValue is '-'. Thus formula doesn't change.*/\n    }\n\n    // if formula has an operator we split the formulaArray into values split by operators.\n    else if (operatorRegex.test(formula)) {\n      // Thus if a number with more than one digit is used after an operator the output would be just that number and not the whole formula\n      setOutput(formulaArray[formulaArray.length - 1] + eventValue); // The formulaArray index after operator and adding eventValue () if index = \"\" then just produces eventValaue as output\n      setFormula(formula + eventValue);\n    }\n\n    // If the event being clicked is an operator\n    else if (operatorRegex.test(eventValue)) {\n      setOutput(eventValue); // Output value is simply the operator clicked\n      setFormula(formula + eventValue); // add the operator to the formula\n    }\n\n    // If just another number is called\n    else {\n      setOutput(formula + eventValue);\n      setFormula(formula + eventValue);\n    }\n  }\n\n  return (\n    <div>\n      <h1 id=\"header\">Javascript Calculator</h1>\n      <div id=\"calculator-container\">\n        <div id=\"output-formula-container\">\n          <Output answer={output} />\n          <Formula formula={formula} />\n        </div>\n        {/*properties passed have the function we want to use when clicked. So in Button \n        component we pass these props and set onClikc={props.(property name we set)} */}\n        <Buttons\n          numberOperator={numberOperatorClick}\n          allClear={allClearClick}\n          clearOne={clearOneClick}\n          decimal={decimalClick}\n          equals={equalsClick}\n          percentage={percentageClick}\n        />\n      </div>\n\n      <div id=\"note\">This calculator uses Formula/expression logic</div>\n\n      {/* Simple footer to give yourself credit */}\n      <div id=\"author\">\n        Design and coded by <br />\n        <a\n          href=\"https://www.linkedin.com/in/hunter-lacefield-871995115/\"\n          target=\"_blank\"\n          rel=\"noreferrer\"\n        >\n          {/* React said if I don't have rel=\"noreferrer\" it is a \n      security risk. So I just added it and the alert is gone.  #secure */}\n          Hunter Lacefield\n        </a>\n      </div>\n    </div>\n  );\n}\n\nfunction Buttons(props) {\n  return (\n    <div id=\"buttons-container\">\n      {/* Set onClick equal to the prop that is needed passed in <Button (prop...) />  up in the main function */}\n      <button id=\"clear\" value=\"AC\" style={clearStyle} onClick={props.allClear}>\n        AC\n      </button>\n\n      <button\n        id=\"clearOne\"\n        value=\"C\"\n        style={signDecimalChange}\n        onClick={props.clearOne}\n      >\n        C\n      </button>\n\n      {/* Set onClick equal to the prop that is needed passed in <Button (prop...) />  up in the main function */}\n      <button\n        id=\"percentage\"\n        style={signDecimalChange}\n        value=\"percent\"\n        onClick={props.percentage}\n      >\n        %\n      </button>\n      {/* Set onClick equal to the prop that is needed passed in <Button (prop...) />  up in the main function */}\n      <button\n        id=\"divide\"\n        style={operatorStyle}\n        value=\"/\"\n        onClick={props.numberOperator}\n      >\n        /\n      </button>\n      {/* Set onClick equal to the prop that is needed passed in <Button (prop...) />  up in the main function */}\n      <button id=\"seven\" value=\"7\" onClick={props.numberOperator}>\n        7\n      </button>\n      <button id=\"eight\" value=\"8\" onClick={props.numberOperator}>\n        8\n      </button>\n      <button id=\"nine\" value=\"9\" onClick={props.numberOperator}>\n        9\n      </button>\n      <button\n        id=\"multiply\"\n        style={operatorStyle}\n        value=\"*\"\n        onClick={props.numberOperator}\n      >\n        x\n      </button>\n      <button id=\"four\" value=\"4\" onClick={props.numberOperator}>\n        4\n      </button>\n      <button id=\"five\" value=\"5\" onClick={props.numberOperator}>\n        5\n      </button>\n      <button id=\"six\" value=\"6\" onClick={props.numberOperator}>\n        6\n      </button>\n      <button\n        id=\"subtract\"\n        style={operatorStyle}\n        value=\"-\"\n        onClick={props.numberOperator}\n      >\n        -\n      </button>\n      <button id=\"one\" value=\"1\" onClick={props.numberOperator}>\n        1\n      </button>\n      <button id=\"two\" value=\"2\" onClick={props.numberOperator}>\n        2\n      </button>\n      <button id=\"three\" value=\"3\" onClick={props.numberOperator}>\n        3\n      </button>\n      <button\n        id=\"add\"\n        style={operatorStyle}\n        value=\"+\"\n        onClick={props.numberOperator}\n      >\n        +\n      </button>\n      <button\n        id=\"zero\"\n        className=\"jumbo\"\n        value=\"0\"\n        onClick={props.numberOperator}\n      >\n        0\n      </button>\n      <button id=\"decimal\" value=\".\" onClick={props.decimal}>\n        .\n      </button>\n      {/* Set onClick equal to the prop that is needed passed in <Button (prop...) />  up in the main function */}\n      <button\n        id=\"equals\"\n        style={operatorStyle}\n        value=\"=\"\n        onClick={props.equals}\n      >\n        =\n      </button>\n    </div>\n  );\n}\n\nfunction Output(props) {\n  return <div id=\"display\">{props.answer}</div>;\n}\nfunction Formula(props) {\n  return <div id=\"formula\">{props.formula}</div>;\n}\nReactDOM.render(<MyCalculator />, document.getElementById(\"root\"));\n",["20","21"],"/Users/HunterLacefield/javascript-calculator/src/App.js",[],"/Users/HunterLacefield/javascript-calculator/src/reportWebVitals.js",[],{"ruleId":"22","severity":1,"message":"23","line":76,"column":26,"nodeType":"24","messageId":"25","endLine":76,"endColumn":30},{"ruleId":"22","severity":1,"message":"23","line":86,"column":26,"nodeType":"24","messageId":"25","endLine":86,"endColumn":30},{"ruleId":"22","severity":1,"message":"23","line":96,"column":26,"nodeType":"24","messageId":"25","endLine":96,"endColumn":30},{"ruleId":"26","replacedBy":"27"},{"ruleId":"28","replacedBy":"29"},"no-eval","eval can be harmful.","CallExpression","unexpected","no-native-reassign",["30"],"no-negated-in-lhs",["31"],"no-global-assign","no-unsafe-negation"]